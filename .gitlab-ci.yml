stages:
  - build
  - release

.variables:
  DOTNET_CONFIGURATION: "Release"
  DOTNET_VERSION: "9.0.x"

build_linux_x64:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:9.0
  variables:
    RUNTIME_ID: "linux-x64"
  only:
    refs:
      - tags
  script:
    - apt-get update && apt-get install -y sed
    - VERSION=$(grep -Eio -m 1 '<Version>.*</Version>' ./src/GEHistoricalImagery/GEHistoricalImagery.csproj | sed -r 's/<\/?Version>//g')
    - OUTPUT="bin/Publish/$RUNTIME_ID/gdal"
    - dotnet publish src/GEHistoricalImagery/GEHistoricalImagery.csproj --runtime $RUNTIME_ID --configuration $DOTNET_CONFIGURATION --output $OUTPUT -p:DefineConstants=LINUX -p:PublishProtocol=FileSystem -p:SelfContained=true -p:PublishTrimmed=true -p:PublishSingleFile=true
    - cd src/bin/Publish/$RUNTIME_ID
    - |
      echo -e '#!/usr/bin/env bash\nSCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )\nexport GEHistoricalImagery_Cache="$SCRIPT_DIR/cache"\nexport GDAL_DATA="$SCRIPT_DIR/gdal"\nexport GDAL_DRIVER_PATH="$SCRIPT_DIR/gdal"\nexport PROJ_LIB="$SCRIPT_DIR/gdal"\n"$SCRIPT_DIR/gdal/GEHistoricalImagery" "$@"' > GEHistoricalImagery
      chmod +x GEHistoricalImagery
    - ARTIFACT="GEHistoricalImagery.${VERSION}-linux-x64.tar.gz"
    - tar -cvz -f ../$ARTIFACT *
    - mv ../$ARTIFACT $CI_PROJECT_DIR/
  artifacts:
    paths:
      - GEHistoricalImagery.*-linux-x64.tar.gz
    expire_in: 7 days

build_linux_arm64:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:9.0
  variables:
    RUNTIME_ID: "linux-arm64"
  only:
    refs:
      - tags
  script:
    - apt-get update && apt-get install -y sed
    - VERSION=$(grep -Eio -m 1 '<Version>.*</Version>' ./src/GEHistoricalImagery/GEHistoricalImagery.csproj | sed -r 's/<\/?Version>//g')
    - OUTPUT="bin/Publish/$RUNTIME_ID/gdal"
    - dotnet publish src/GEHistoricalImagery/GEHistoricalImagery.csproj --runtime $RUNTIME_ID --configuration $DOTNET_CONFIGURATION --output $OUTPUT -p:DefineConstants=LINUX -p:PublishProtocol=FileSystem -p:SelfContained=true -p:PublishTrimmed=true -p:PublishSingleFile=true
    - cd src/bin/Publish/$RUNTIME_ID
    - |
      echo -e '#!/usr/bin/env bash\nSCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )\nexport GEHistoricalImagery_Cache="$SCRIPT_DIR/cache"\nexport GDAL_DATA="$SCRIPT_DIR/gdal"\nexport GDAL_DRIVER_PATH="$SCRIPT_DIR/gdal"\nexport PROJ_LIB="$SCRIPT_DIR/gdal"\n"$SCRIPT_DIR/gdal/GEHistoricalImagery" "$@"' > GEHistoricalImagery
      chmod +x GEHistoricalImagery
    - ARTIFACT="GEHistoricalImagery.${VERSION}-linux-arm64.tar.gz"
    - tar -cvz -f ../$ARTIFACT *
    - mv ../$ARTIFACT $CI_PROJECT_DIR/
  artifacts:
    paths:
      - GEHistoricalImagery.*-linux-arm64.tar.gz
    expire_in: 7 days

release:
  stage: release
  image: curlimages/curl:latest
  only:
    refs:
      - tags
  script:
    - TAG_VERSION="${CI_COMMIT_TAG#v}"
    - RELEASE_NAME="GEHistoricalImagery v${TAG_VERSION}"
    - RELEASE_DESCRIPTION="Auto release by CI for tag $CI_COMMIT_TAG"
    - mkdir -p release_artifacts
    - mv GEHistoricalImagery.* release_artifacts/
    - >
      curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" --request POST "https://${GITLAB_DOMAIN}/api/v4/projects/${CI_PROJECT_ID}/releases" 
      --form "name=$RELEASE_NAME" 
      --form "tag_name=$CI_COMMIT_TAG" 
      --form "description=$RELEASE_DESCRIPTION"
    - |
      for artifact in release_artifacts/*; do
        curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" --request POST "https://${GITLAB_DOMAIN}/api/v4/projects/${CI_PROJECT_ID}/uploads" \
        --form "file=@${artifact}" > upload_response.json
        URL=$(cat upload_response.json | jq -r '.url')
        NAME=$(basename $artifact)
        curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" --request POST "https://${GITLAB_DOMAIN}/api/v4/projects/${CI_PROJECT_ID}/releases/${CI_COMMIT_TAG}/assets/links" \
          --form "name=$NAME" \
          --form "url=${CI_PROJECT_URL}${URL}"
      done
  dependencies:
    - build_linux_x64
    - build_linux_arm64
  artifacts:
    paths:
      - release_artifacts/
    expire_in: 7 days

validate:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:9.0
  only:
    refs:
      - tags
  script:
    - echo "Validasi build di tag $CI_COMMIT_TAG"
